{"version":3,"sources":["LiveVideo/LiveVideo.module.css","LiveVideo/video-client.js","LiveVideo/LiveVideo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","videoClient","canvas","url","onStart","onMessage","webSocket","WebSocket","binaryType","wsavc","WSAvcPlayer","initialised","send","message","JSON","stringify","close","onopen","console","log","name","state","onclose","event","onerror","onmessage","evt","data","parse","content","width","height","initCanvas","frame","Uint8Array","addFrame","LiveVideo","useState","videoState","setVideoState","containerSize","setContainerSize","videoSettings","setVideoSettings","motion","setMotion","videoCanvas","useRef","videoContainer","useEffect","current","setTimeout","container","getBoundingClientRect","canvasStyle","containerRatio","videoRatio","className","styles","liveVideo","ref","controls","onClick","newState","video","style","address","document","location","href","startsWith","App","feeds","setFeeds","getFeeds","a","fetch","response","json","cameraData","cameras","interval","setInterval","clearInterval","cameraRows","window","innerWidth","innerHeight","length","split","Math","ceil","slice","map","cam","row","index","key","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e405d737.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"liveVideo\":\"LiveVideo_liveVideo__1ZkFR\",\"motion\":\"LiveVideo_motion__2L80a\",\"controls\":\"LiveVideo_controls__kPM7Y\",\"name\":\"LiveVideo_name__2UIOL\"};","import WSAvcPlayer from 'h264-live-player';\n\nconst videoClient = ({ canvas, url, onStart, onMessage }) => {\n    const webSocket = new WebSocket(url, 'echo-protocol');\n    webSocket.binaryType = \"arraybuffer\";\n\n    const wsavc = new WSAvcPlayer(canvas, \"webgl\", 1, 35);\n    let initialised = false;\n\n    const send = message => {\n        webSocket.send(JSON.stringify(message));\n    };\n    const close = () => {\n        webSocket.close();\n    }\n\n    webSocket.onopen = () => {\n        console.log('socket is connected');\n        webSocket.send(JSON.stringify({\n            name: 'camera',\n            state: 'timelapse'\n        }));\n    }\n    webSocket.onclose = event => {\n        console.log('socket is closed', event);\n    }\n    webSocket.onerror = event => {\n        console.log('socket error', event);\n    }\n    \n    webSocket.onmessage = (evt) => {\n        if(typeof evt.data == \"string\") {\n            const data = JSON.parse(evt.data);\n            if (!initialised && data.name === 'camera' && data.event === 'settings') {\n                const { width, height } = data.content;\n                wsavc.initCanvas(width, height);\n                initialised = true;\n\n                if (onStart) {\n                    onStart({ width, height, send, close });\n                } else if (onMessage) {\n                    onMessage(data.content);\n                }\n            } else {\n                if (onMessage) {\n                    onMessage(data);\n                }\n                console.log(data);\n            }\n        } else {\n            var frame = new Uint8Array(evt.data);\n            wsavc.addFrame(frame);\n        }\n    };\n}\n\nexport default videoClient;","import React, { useRef, useEffect, useState } from 'react'\nimport videoClient from './video-client';\nimport styles from './LiveVideo.module.css';\n\nconst LiveVideo = ({ name, url }) => {\n    const [videoState, setVideoState] = useState('off');\n    const [containerSize, setContainerSize] = useState({});\n    const [videoSettings, setVideoSettings] = useState({});\n    const [motion, setMotion] = useState(false);\n\n    const videoCanvas = useRef();\n    const videoContainer = useRef();\n\n    useEffect(() => {\n        const onMessage = content => {\n            if (content.name === 'camera' && content.event === 'motion') {\n                setMotion(true);\n                setTimeout(() => {\n                    setMotion(false);\n                }, 2000);\n            }\n        }\n\n        if (videoState === 'off') {\n            videoClient({\n                canvas: videoCanvas.current,\n                url,\n                onStart: setVideoSettings,\n                onMessage\n            });\n            setVideoState('timelapse');\n        }\n\n        return () => {\n            console.log('cleanup LiveVideo component');\n            if (videoSettings.close) videoSettings.close();\n        };\n    }, [url]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        const container = videoContainer.current.getBoundingClientRect();\n        const current = {\n            width: container.width - 4,\n            height: container.height - 4\n        };\n        if (current.width !== containerSize.width || current.height !== containerSize.height) {\n            setContainerSize(current);\n        }\n    }, [containerSize]);\n    \n    let canvasStyle = {};\n    if (containerSize.height && videoSettings.height) {\n        const containerRatio = containerSize.width / containerSize.height;\n        const videoRatio = videoSettings.width / videoSettings.height;\n\n        if (containerRatio > videoRatio) {\n            canvasStyle = {\n                width: containerSize.height * videoRatio,\n                height: containerSize.height\n            }\n        } else {\n            canvasStyle = {\n                width: containerSize.width,\n                height: containerSize.width / videoRatio\n            }\n        }\n    }\n\n    const togglePlay = () => {\n        const newState = videoState === 'on' ? 'timelapse' : 'on';\n        setVideoState(newState);\n        videoSettings.send({\n            name: 'camera',\n            state: newState\n        });\n    }\n\n    return (\n        <div className={styles.liveVideo + (motion ? ' ' + styles.motion : '')} ref={videoContainer}>\n            <div className={styles.controls}>\n                <span className={styles.name}>{name}</span>\n                <button onClick={togglePlay}>{videoState === 'on' ? '\\u23f8\\ufe0e' : '\\u23f5\\ufe0e'}</button>\n            </div>\n            <canvas className={styles.video} ref={videoCanvas} style={canvasStyle} />\n        </div>\n    );\n};\n\nexport default LiveVideo;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport LiveVideo from './LiveVideo/LiveVideo';\n\nconst address = document.location.href.startsWith('http://localhost')\n  ? 'http://garage:45738/cameras'\n  : '/cameras';\n\nfunction App() {\n  const [feeds, setFeeds] = useState([]);\n\n  useEffect(() => {\n    const getFeeds = async () => {\n      const response = await fetch(address);\n      const cameraData = await response.json();\n      setFeeds(cameraData.cameras);\n    }\n    getFeeds();\n    const interval = setInterval(getFeeds, 10000);\n\n    return () => {\n      clearInterval(interval);\n    }\n  }, []);\n\n  let cameraRows = [];\n  if (window.innerWidth > window.innerHeight && feeds.length > 1) {\n    const split = Math.ceil(feeds.length / 2);\n    cameraRows = [\n      feeds.slice(0, split),\n      feeds.slice(split)\n    ];\n  } else {\n    cameraRows = feeds.map(cam => [cam]);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        {cameraRows.map((row, index) => \n          <div className=\"App-row\" key={`row-${index}`}>\n            {row.map(cam => \n              <LiveVideo name={cam.name} url={cam.address} key={cam.name}></LiveVideo>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}